from DSA import *

q = 897434149680309024926610536586679400252190817513

p = 97223004199266313523049166053330029092380541300786138924873181088471438705453794046370914345592432368059271294544102722787957310837797304650943069820520287549826630230617625792526214799206486444554607275157031742808122667064876655138748567945051878459968434840972135354745893868660267009794876094057307360271

g = 4621497210057935612371988511711932510361318115609980978853236984314561739819039313271820105098638480214293876477070872723831493769268422441714876014396954567136665583461293138792502100498181714605761615088670098808016625617309860858682957197265294737395362167975930097648958972424479880194787709852371142579

# public key beta
beta = 45720223092558820344769930028614803638859051907129501277880999062740852114889610377894039520973053847174144955552627174266061939323577184681728281156812736603122999262209953001238229439108117677423857541271841004309469066208083385254271589636542160767902921803860270699359911081346969522186114311390226677995

# Given two messages

message1 = b"He who laugh last didn't get the joke"
r1 = 867552604169477346883674422144796797059303863627
s1 = 243861349833858115605937030382497401412336608822

message2 = b"Ask me no questions, and I'll tell you no lies"
r2 = 686145019080375810998084468514665120375929537329
s2 = 774583422188330317252601038183072854135396118762

# We are given k2 = 2 x k1 mod q
# Find secret key a

shake = SHAKE128.new(message1)
h1 = int.from_bytes(shake.read(q.bit_length()//8), byteorder='big')
shake = SHAKE128.new(message2)
h2 = int.from_bytes(shake.read(q.bit_length()//8), byteorder='big')

h1 = h1%q
h2 = h2%q

invs1 = modinv(s1,q)
invs2 = modinv(s2,q)

eq1 = (-(invs2 * h2 - 2*invs1*h1)) % q
eq2 = invs2 * r2 - 2 * invs1 * r1
eq2 = eq2 % q
inveq2 = modinv(eq2, q)

a = eq1 * inveq2 % q

print("a is found, a=", a)

k = random.randint(0, q-1)
r, s = Sig_Gen(message1, a, k, q, p, g)

print("\nNew r1, and s1 for new k\n", r, " ", s)
if Sig_Ver(message1, r, s, beta, q, p, g):
    print("\nsignature verifies for message1 ")
else:
    print("invalid signature:( ")    

r, s = Sig_Gen(message2, a, k, q, p, g)

print("\nNew r2, and s2 for new k\n",r, " ", s)
if Sig_Ver(message2, r, s, beta, q, p, g):
    print("\nsignature verifies for message2 ")
else:
    print("invalid signature:( ")    

