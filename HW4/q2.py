import math
from ElGamal import modinv

q = 1331165794223730998214479682055290809139803703979

p = 157985265365233926063394088702502775477411699807450440916775405947257964574813502993749815770128973338289285516154109088043476314331444397215358170585840641049172791477662283893716386808139204949694492602287891654767148522867881937046157301612266431912023462991540765986938468014946969764702086638496649455657

g = 135065956040029542891335614580458248416002250295204395146754036299690682917789289716583464736425816867965184913947179997468650756414729019331183463002574881956749358833871584578559474520218159551812002168419391427229522879948629379275361929622066470148375436287416532348407065836711249965189758444892419490190

# Public key
h = 65369531380434811091013169285144074654274264126019340876116721977646567453108441439476580614131141018711217039183159447339703498645723099709331310035001607050335740436825222938421053125935986024030566120585714682225125302549720107383365077208839310065478286374555114097276440333388769523316671044117487454589

# Resulting ciphertext
r = 3603216964442507357032842714265491356140106170126012271249273782498781062854993590551963255079610858746338241608699542316440867356686210833642816015952448905408390917797105408900214398591806869245572453652902222971116293353284737156497321871750301615013009395209713928847567903247743033867199791859981117263

t = 42244680577489180150438247901105682607063917920969521526593784819134087337617171624434658483262821880559452723151685731248400300205495303414447593079691461437018769475479437685274446474785220966939670711206064076236087750024913718835564780638938635976122622009741305316868203434730711663863398065249173925645


print("Given Parameters")
print("q =", q)
print("p =", p)
print("g =", g)
print("public key (h):", h)

print("Given Ciphertext (r,t):", r, t)


range_end = 2**16 - 1
for k in range(1, range_end):
    gk = pow(g, k, p)
    if gk == r:
        print("\nFound k s.t. g^k equals to r, where k =", k)
        hk = pow(h, k, p)  # k over h mod p
        print("\nUsing k, calculate h^k =", hk)
        invk = modinv(hk, p)
        print("\nUsing h^k, calculate the inverse over mod p, where inverse of h^k over mod p is =", invk)
        if invk != None:
            m = (invk * t) % p
            m_b = m.to_bytes((m.bit_length()+7)//8, byteorder='big')
            print("\nFinally the message is found:\n")
            print(m_b)
            break
