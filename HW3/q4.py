import math


def egcd(a, b):
    x, y, u, v = 0, 1, 1, 0
    while a != 0:
        q, r = b//a, b % a
        m, n = x-u*q, y-v*q
        b, a, x, y, u, v = a, r, u, v, m, n
    gcd = b
    return gcd, x, y


def modinv(a, m):
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m


def phi(n):
    amount = 0
    for k in range(1, n + 1):
        if math.gcd(n, k) == 1:
            amount += 1
    return amount


e = 65537
N = 4131050804701947615474143330647520043409422542555438899772006619584945340119494649404129371817979723151949121241703378752722699538230573280931110089904937167907235670950600408473367355490703599182689592510968586723123472663548236788459038268157326078778911167528038386964502552412608060108007769524518942771622175289823182473018026393098835614963683062594807036906626036129123789566927291732854619902597726403125881968574446179918998140970652556709962611125425594329231466588467030961620469125134654566923297538042292332544406175518916678210686925936341811732104917605118575775329334829543752265141266783630832854187

c = 286011333479246811807036978298499172055797623822007560823628330407176989331751815848494737394310492374805419675958067102325270756298968875428244016352736458046904203412669134207806910534413220489710408452767455368567189168921003750345234473915004072109521598843246444074965165007427386987929674642591506744871181356247565764232892236100024802851129256309465367597958913617035234759551640734971193268573642824284719009304086710729931481730871492097430958962565736552256356850187124726045482360175673464358349365112652477377441584665739736701619949825887312761535693506114283123294171040950993106172221548552046342629

c2 = (pow(c, e, N)*c) % N

response = 1782930167936506935964467211547449578269184315483319401850758028261903377585169328916298875764217329349156030185358313981041847313654162160205239661575345616665115854728768949884278211467626950815523132822430986138085725950267514447201732304269525883287755941280520803253146255266638893292192888134579921984371796853747077513575774829830663130705344543524410876818407567555309023165096371679124386124604890059238990560037163485985088751446605442091532512695473576469618946783929196250001873753579576034185627876028840251997957832983282978763559364631348641458067512236152934013458974372314829509255074674994121747038

print("Explanation:\nWe can query oracle with any text that is not actually the ciphertext c.\nSo we can make reversable modification to c,\nand query it to oracle and oracle will raise it to power d over mod N.\nWhere d is the decryption key s.t. inverse of e(encryption key) in mod phi(n).\n")

print("\nGiving c2 to oracle and oracle returns us:", response)

M = (int(response)*modinv(c, N)) % N

print("\nMessage:", M)

print("\nMessage: ", M.to_bytes((M.bit_length()+7)//8, byteorder='big'))
